version: "3.3"

services:
  
  python:
    build:
      context: ./python
    #image: gc/python:latest
    expose:
      - "9999"
    links:
      - php:php
    ports:
      - "9999:9999"
#    environment:
#      - INFLUXDB_GRAPHITE_ENABLED=true
#      - INFLUXDB_ADMIN_ENABLED=true
#      - INFLUXDB_REPORTING_DISABLED=false
#      - INFLUXDB_DATA_QUERY_LOG_ENABLED=true
    volumes:
      - ./python:/root
    links:
      - php:php
    networks:
      - backend

  registry:
    image: registry:latest
    ports:
      - "5000:5000"
#    environment:
#      - INFLUXDB_GRAPHITE_ENABLED=true
#      - INFLUXDB_ADMIN_ENABLED=true
#      - INFLUXDB_REPORTING_DISABLED=false
#      - INFLUXDB_DATA_QUERY_LOG_ENABLED=true
#    volumes:
#      - ${DATA_SAVE_PATH}/influxdb:/var/lib/influxdb
    networks:
      - backend
  
  influxdb:
    image: influxdb:alpine
    ports:
      - "${INFLUXDB_PORT}:8086"
      - "${INFLUXDB_WEB_UI_PORT}:8083"
      - "${INFLUXDB_GRAPHITE_PORT}:2003"
    environment:
      - INFLUXDB_GRAPHITE_ENABLED=true
      - INFLUXDB_ADMIN_ENABLED=true
      - INFLUXDB_REPORTING_DISABLED=false
      - INFLUXDB_DATA_QUERY_LOG_ENABLED=true
    volumes:
      - ${DATA_SAVE_PATH}/influxdb:/var/lib/influxdb
    links:
      - php:php
    networks:
      - backend

## problem where is the esata2 and estat1 file location
## nano /etc/bash.bashrc  ubuntu sysctl -w vm.max_map_count=262144 otherwise error
## curl http://127.0.0.1:9200/_cat/health           1472225929 15:38:49 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%
## notes https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
## notes the production config
## elasticsearch master slave mode
## offical repo for docker is so slow need early docker pull and mirror it
  elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:6.0.0
      container_name: elasticsearch
      environment:
        - cluster.name=docker-cluster
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      ulimits:
        memlock:
          soft: -1
          hard: -1
      volumes:
        - esdata1:/usr/share/elasticsearch/data
      ports:
        - ${ELASTIC_SEARCH_PORT}:9200
        - ${ELASTIC_SEARCH_PORT_2}:9300
      networks:
        - backend

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.0.0
    container_name: elasticsearch2
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - backend


## elasticsearch develepoment single mode
#  docker run -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:6.0.0
#    elasticdev:
#      image: docker.elastic.co/elasticsearch/elasticsearch:6.0.0
#      ports:
#        - "${ELASTIC_SEARCH_PORT}:9200"
#        - "${ELASTIC_SEARCH_PORT_2}:9300"
#      environment:
#        - discovery.type=single-node
#      volumes:
#        - ${DATA_SAVE_PATH}/influxdb:/var/lib/influxdb
#      links:
#        - php:php
#      networks:
#        - backend


  # redis:
  #   build:
  #     context: ./redis
  #   user: redis
  #   ports:
  #     - "${REDIS_PORT}:6379"
  #   volumes:
  #     - ${DATA_SAVE_PATH}/redis:/data
  #   links:
  #     - php:php
  #   networks:
  #     - backend
      # redis-cli -h redis -a z123456
#  rcli:
#    image: redis:4-alpine
#    links:
#      - redis
#    networks:
#      - backend
#    command: redis-cli -h redis -a z123456

### Elasticsearch Container #########################################

  # elasticsearch1:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:5.5.0
  #   container_name: elasticsearch
  #   environment:
  #     - cluster.name=docker-cluster
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ${DATA_SAVE_PATH}/esdata1:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - backend
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1g
  #       reservations:
  #         memory: 20M

  # elasticsearch2:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:5.5.0
  #   environment:
  #     - cluster.name=docker-cluster
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "discovery.zen.ping.unicast.hosts=elasticsearch1"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1g
  #       reservations:
  #         memory: 20M
  #   volumes:
  #     - ${DATA_SAVE_PATH}/esdata2:/usr/share/elasticsearch/data
  #   networks:
  #     - backend


### Jetbrain idea license Container #########################################

#  idea:
#    image: dominate/idea-license-server
#    environment:
#      - USER="$USER"
#    ports:
#      - 1017:1017
#    networks:
#      - backend


### MySQL Container #########################################

  # mysql:
  #   build:
  #     context: ./mysql
  #   environment:
  #     - MYSQL_DATABASE=${MYSQL_DATABASE}
  #     - MYSQL_USER=${MYSQL_USER}
  #     - MYSQL_PASSWORD=${MYSQL_PASSWORD}
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  #     - TZ=${WORKSPACE_TIMEZONE}
  #   volumes:
  #     - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
  #     - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
  #     - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
  #   ports:
  #     - "${MYSQL_PORT}:3306"
  #   links:
  #     - php:php
  #   networks:
  #     - backend

#   mongo:
#  #   build: 
#  #     context: ./mongo
#     image: mvertes/alpine-mongo
#     networks:
#       - backend
#     links:
#       - php:php
#     ports:
#       - "27017:27017"
#       - "28017:28017"
#     volumes:
#       - ${DATA_SAVE_PATH}/mongo:/data/db

  php:
    #image: gakaki/php
    build:
     context: ./php
    # volumes_from:
    #   - applications
    volumes:
      - ./php/php_append.ini:/usr/local/etc/php/conf.d/php_append.ini
      - ${APPLICATION}:/var/www/
      - ./php/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ./php/php-fpm.conf:/usr/local/etc/php-fpm.conf
    expose:
      - "9000"
    tty: true
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    networks:
      - backend

## Nginx Server Container ##################################
  openresty:
    build:
      context: ./openresty
      #       args:
      #         - PHP_UPSTREAM=php-fpm
      #     volumes_from:
      #       - applications
    links:
      - php:php
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/usr/local/openresty/nginx/logs/
      - ./openresty/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ${NGINX_SITES_PATH}:/usr/local/openresty/nginx/conf/vhosts
      - ${APPLICATION}:/var/www
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php
    networks:
      - frontend
      - backend

# ### PHP Worker Container #####################################

#     php-worker:
#       build:
#         context: ./php-worker
#       volumes_from:
#         - applications
#       depends_on:
#         - workspace
#       extra_hosts:
#         - "dockerhost:${DOCKER_HOST_IP}"
#       networks:
#         - backend

### Nginx Server Container ##################################

    # nginx:
    #   build:
    #     context: ./nginx
    #     args:
    #       - PHP_UPSTREAM=php-fpm
    #   volumes_from:
    #     - applications
    #   volumes:
    #     - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
    #     - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    #   ports:
    #     - "${NGINX_HOST_HTTP_PORT}:80"
    #     - "${NGINX_HOST_HTTPS_PORT}:443"
    #   depends_on:
    #     - php-fpm
    #   networks:
    #     - frontend
    #     - backend

volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local

networks:
  backend:
    driver: "bridge"
  frontend:
    driver: "bridge"

#   reverse_proxy:
#     build: ./reverse_proxy
#     user: nginx

#   database:
#     build: 
#        context: ./database
#     image: atsea_db
#     user: postgres
#     environment:
#       POSTGRES_USER: gordonuser
#       POSTGRES_DB_PASSWORD_FILE: /run/secrets/postgres_password
#       POSTGRES_DB: atsea
#     ports:
#       - "5432:5432" 
#     networks:
#       - back-tier
#     secrets:
#       - postgres_password

#   appserver:
#     build:
#        context: app
#        dockerfile: Dockerfile
#     image: atsea_app
#     user: gordon
#     ports:
#       - "8080:8080" 
#       - "5005:5005"
#     networks:
#       - front-tier
#       - back-tier
#     secrets:
#       - postgres_password

#   payment_gateway:
#     build:
#       context: payment_gateway
#     networks:
#       - payment
#     secrets:
#       - payment_token



# secrets:
#   postgres_password:
#     file: ./devsecrets/postgres_password
#   payment_token:
#     file: ./devsecrets/payment_token
